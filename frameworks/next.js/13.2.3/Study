/* Pages */
* Pre-rendering
By default, Next.js pre-renders every page

Static Generation (Recommended)
 - generated at build time & reused
Server-side Rendering
 - generated on each request

Static Generation with data
 - getStaticProps(async): content from external data
 - getStaticPaths(async): Paths from external data

Priority
 1. Static Generation
 // if user's request (frequently updated data || content changes on every request)
 2 - a. Static Generation & Client-side data fetching
     b. Use Server-Side Rendering

* Server-side Rendering
HTML is generated on each request
 - getServerSideProps(async)


/* Data Fetching */

* getServerSideProps
If don't need to render the data during the request, considerclient side || getStaticProps

* Fetching data on the client side
page contains frequently updating data
donâ€™t need to pre-render the data
 1. immediately show the page without data
   (Parts of the page can be pre-rendered using Static Generation)
   (You can show loading states for missing data)
 2. fetch the data on the client side and display it when ready
   (ex - user dashboard)

* getStaticProps (gets called at build time on server-side)
pre-render at build time using the props returned by getStaticProps
no access to the incoming request(query parameters || HTTP headers) as it generates static HTML
if need, consider  Middleware with getStaticProps

Preview Mode
temporarily bypass static generation
render the page at request time instead of build time
want to preview drafts before published

* getStaticPaths
dynamic Routes & getStaticProps
only run during build in production
runs on every request in development
can defer generating all pages on-demand by returning an empty array for paths (useful for preview)

* Incremental Static Regeneration
1. when a request made, show cached
2. any requests in revalidate time, show cached
3. after time, cached(tale)
4. trigger regeneration in bg
5. invalidate cache and show updated (old if failed)

* Client-side data fetching
useful when
 - your page doesn't require SEO indexing
 - you don't need to pre-render your data
 - the content of your pages needs to update frequently
 - unlike server-side rendering APIs, can use at the component level
 - data is not cached
at the component level
 - the data is fetched at the component mount

Client-side data fetching with SWR
 - SWR hook highly recommended if fetching data on the client-side
 - handles caching, revalidation, focus tracking, refetching on intervals, and more

/* Image Component and Image Optimization */
fill
 - parent element "position: relative"
 - parent element "display: block"

/* Optimizing Fonts */
 - variable fonts recommended
 - if load the same font function in multiple files, multiple instances of the same font are hosted.
   1. Call the font loader function in one shared file
   2. Export it as a constant
   3. Import the constant in each file

